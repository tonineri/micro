#!/usr/bin/python3 -u
# -*- coding: utf-8 -*-

import argparse
import errno
import json
import os
import re
import signal
import stat
import sys
import time

ENV_INIT_DIRECTORY = os.environ.get('ENV_INIT_DIRECTORY', '/etc/minit.d')
KILL_PROCESS_TIMEOUT = int(os.environ.get('KILL_PROCESS_TIMEOUT', 30))
KILL_ALL_PROCESSES_TIMEOUT = int(os.environ.get('KILL_ALL_PROCESSES_TIMEOUT', 30))

LOG_LEVELS = {
    'error': 1,
    'warn': 2,
    'info': 3,
    'debug': 4
}

SHENV_NAME_WHITELIST_REGEX = re.compile(r'\W')

log_level = None
terminated_child_processes = {}

class AlarmException(Exception):
    pass

def log(message, level='info'):
    if log_level >= LOG_LEVELS[level]:
        sys.stderr.write(f"*** {message}\n")

def ignore_signals_and_raise_keyboard_interrupt(signame):
    signal.signal(signal.SIGTERM, signal.SIG_IGN)
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    raise KeyboardInterrupt(signame)

def raise_alarm_exception():
    raise AlarmException('Alarm')

def listdir(path):
    try:
        result = os.stat(path)
        if stat.S_ISDIR(result.st_mode):
            return sorted(os.listdir(path))
    except OSError:
        pass
    return []

def is_exe(path):
    try:
        return os.path.isfile(path) and os.access(path, os.X_OK)
    except OSError:
        return False

def import_envvars(clear_existing_environment=True, override_existing_environment=True):
    env_dir = "/etc/container_environment"
    if not os.path.exists(env_dir):
        return
    new_env = {}
    for envfile in listdir(env_dir):
        name = os.path.basename(envfile)
        with open(os.path.join(env_dir, envfile), "r") as f:
            value = f.read().rstrip('\n')
        new_env[name] = value
    if clear_existing_environment:
        os.environ.clear()
    for name, value in new_env.items():
        if override_existing_environment or name not in os.environ:
            os.environ[name] = value

def export_envvars(to_dir=True):
    env_dir = "/etc/container_environment"
    if not os.path.exists(env_dir):
        return
    shell_dump = ""
    for name, value in os.environ.items():
        if name in ['HOME', 'USER', 'GROUP', 'UID', 'GID', 'SHELL']:
            continue
        if to_dir:
            with open(os.path.join(env_dir, name), "w") as f:
                f.write(value)
        shell_dump += f"export {sanitize_shenvname(name)}={shquote(value)}\n"
    with open("/etc/container_environment.sh", "w") as f:
        f.write(shell_dump)
    with open("/etc/container_environment.json", "w") as f:
        f.write(json.dumps(dict(os.environ)))

def shquote(s):
    """Return a shell-escaped version of the string *s*."""
    if not s:
        return "''"
    if not re.search(r'[^\w@%+=:,./-]', s):
        return s
    return "'" + s.replace("'", "'\"'\"'") + "'"

def sanitize_shenvname(s):
    """Return string with [0-9a-zA-Z_] characters"""
    return re.sub(SHENV_NAME_WHITELIST_REGEX, "_", s)

def waitpid_reap_other_children(pid):
    global terminated_child_processes

    status = terminated_child_processes.get(pid)
    if status:
        del terminated_child_processes[pid]
        return status

    while True:
        try:
            this_pid, status = os.waitpid(pid, os.WNOHANG)
            if this_pid == 0:
                this_pid, status = os.waitpid(-1, 0)
            if this_pid == pid:
                return status
            terminated_child_processes[this_pid] = status
        except OSError as e:
            if e.errno in {errno.ECHILD, errno.ESRCH}:
                return None
            raise

def stop_child_process(name, pid, signo=signal.SIGTERM, time_limit=KILL_PROCESS_TIMEOUT):
    log(f"Shutting down {name} (PID {pid})...", 'info')
    try:
        os.kill(pid, signo)
    except OSError:
        pass
    signal.alarm(time_limit)
    try:
        waitpid_reap_other_children(pid)
    except AlarmException:
        log(f"{name} (PID {pid}) did not shut down in time. Forcing it to exit.", 'warn')
        try:
            os.kill(pid, signal.SIGKILL)
        except OSError:
            pass
        waitpid_reap_other_children(pid)
    finally:
        signal.alarm(0)

def run_command_killable(*argv):
    filename = argv[0]
    pid = os.spawnvp(os.P_NOWAIT, filename, argv)
    try:
        status = waitpid_reap_other_children(pid)
    except BaseException:
        log("An error occurred. Aborting.", 'warn')
        stop_child_process(filename, pid)
        raise
    if status and status != 0:
        log(f"{filename} failed with status {os.WEXITSTATUS(status)}\n", 'error')
        sys.exit(1)

def run_command_killable_and_import_envvars(*argv):
    run_command_killable(*argv)
    import_envvars()
    export_envvars(False)

def kill_all_processes(time_limit):
    log("Killing all processes...", 'info')
    try:
        os.kill(-1, signal.SIGTERM)
    except OSError:
        pass
    signal.alarm(time_limit)
    try:
        while True:
            try:
                os.waitpid(-1, 0)
            except OSError as e:
                if e.errno == errno.ECHILD:
                    break
                raise
    except AlarmException:
        log("Not all processes have exited in time. Forcing them to exit.", 'warn')
        try:
            os.kill(-1, signal.SIGKILL)
        except OSError:
            pass
    finally:
        signal.alarm(0)

def run_startup_files():
    for name in listdir(ENV_INIT_DIRECTORY):
        filename = os.path.join(ENV_INIT_DIRECTORY, name)
        if is_exe(filename):
            log(f"Running {filename}...", 'info')
            run_command_killable_and_import_envvars(filename)
    if is_exe("/etc/rc.local"):
        log("Running /etc/rc.local...", 'info')
        run_command_killable_and_import_envvars("/etc/rc.local")

def run_pre_shutdown_scripts():
    log("Running pre-shutdown scripts...", 'debug')
    for name in listdir("/etc/minit_pre-shutdown.d"):
        filename = os.path.join("/etc/minit_pre-shutdown.d", name)
        if is_exe(filename):
            log(f"Running {filename}...", 'info')
            run_command_killable(filename)

def run_post_shutdown_scripts():
    log("Running post-shutdown scripts...", 'debug')
    for name in listdir("/etc/minit_post-shutdown.d"):
        filename = os.path.join("/etc/minit_post-shutdown.d", name)
        if is_exe(filename):
            log(f"Running {filename}...", 'info')
            run_command_killable(filename)

def start_runit():
    log("Booting runit daemon...", 'info')
    pid = os.spawnl(os.P_NOWAIT, "/usr/bin/runsvdir", "/usr/bin/runsvdir", "-P", "/etc/service")
    log(f"Runit started as PID {pid}", 'info')
    return pid

def wait_for_runit_or_interrupt(pid):
    return True, waitpid_reap_other_children(pid)

def shutdown_runit_services(quiet=False):
    if not quiet:
        log("Begin shutting down runit services...", 'debug')
    os.system(f"/usr/bin/sv -w {KILL_PROCESS_TIMEOUT} force-stop /etc/service/* > /dev/null")

def wait_for_runit_services():
    log("Waiting for runit services to exit...", 'debug')
    while os.system("/usr/bin/sv status /etc/service/* | grep -q '^run:'") == 0:
        time.sleep(0.1)
        shutdown_runit_services(True)

def install_insecure_key():
    log("Installing insecure SSH key for user root", 'info')
    run_command_killable("/usr/sbin/enable_insecure_key")

def main(args):
    import_envvars(False, False)
    export_envvars()

    if args.enable_insecure_key:
        install_insecure_key()

    if not args.skip_startup_files:
        run_startup_files()

    runit_exited = False
    exit_code = None

    if not args.skip_runit:
        runit_pid = start_runit()
    try:
        exit_status = None
        if not args.main_command:
            runit_exited, exit_code = wait_for_runit_or_interrupt(runit_pid)
            if runit_exited:
                exit_status = os.WEXITSTATUS(exit_code) if exit_code else 1
                log(f"Runit exited with status {exit_status}", 'info')
        else:
            log(f"Running {' '.join(args.main_command)}...", 'info')
            pid = os.spawnvp(os.P_NOWAIT, args.main_command[0], args.main_command)
            try:
                exit_code = waitpid_reap_other_children(pid)
                exit_status = os.WEXITSTATUS(exit_code) if exit_code else 1
                log(f"{args.main_command[0]} exited with status {exit_status}.", 'info')
            except KeyboardInterrupt:
                stop_child_process(args.main_command[0], pid)
                raise
            except BaseException:
                log("An error occurred. Aborting.", 'warn')
                stop_child_process(args.main_command[0], pid)
                raise
        sys.exit(exit_status)
    finally:
        if not args.skip_runit:
            run_pre_shutdown_scripts()
            shutdown_runit_services()
            if not runit_exited:
                stop_child_process("runit daemon", runit_pid)
            wait_for_runit_services()
            run_post_shutdown_scripts()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Initialize the system.')
    parser.add_argument('main_command', metavar='MAIN_COMMAND', type=str, nargs='*', help='The main command to run. (default: runit)')
    parser.add_argument('--enable-insecure-key', action='store_true', help='Install the insecure SSH key')
    parser.add_argument('--skip-startup-files', action='store_true', help='Skip running /etc/minit.d/* and /etc/rc.local')
    parser.add_argument('--skip-runit', action='store_true', help='Do not run runit services')
    parser.add_argument('--no-kill-all-on-exit', dest='kill_all_on_exit', action='store_false', help='Don\'t kill all processes on the system upon exiting')
    parser.add_argument('--quiet', action='store_const', const=LOG_LEVELS['warn'], default=LOG_LEVELS['info'], help='Only print warnings and errors')
    args = parser.parse_args()
    log_level = args.log_level

    if args.skip_runit and not args.main_command:
        log("When --skip-runit is given, you must also pass a main command.", 'error')
        sys.exit(1)

    signal.signal(signal.SIGTERM, lambda signum, frame: ignore_signals_and_raise_keyboard_interrupt('SIGTERM'))
    signal.signal(signal.SIGINT, lambda signum, frame: ignore_signals_and_raise_keyboard_interrupt('SIGINT'))
    signal.signal(signal.SIGALRM, lambda signum, frame: raise_alarm_exception())

    try:
        main(args)
    except KeyboardInterrupt:
        log("Init system aborted.", 'warn')
        sys.exit(2)
    finally:
        if args.kill_all_on_exit:
            kill_all_processes(KILL_ALL_PROCESSES_TIMEOUT)
